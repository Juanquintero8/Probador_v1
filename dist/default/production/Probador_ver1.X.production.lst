

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Apr 25 22:27:08 2025

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.40
    25                           ; Generated 17/11/2021 GMT
    26                           ; 
    27                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F877A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  0086                     	;# 
    97  0087                     	;# 
    98  0088                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  010C                     	;# 
   114  010D                     	;# 
   115  010E                     	;# 
   116  010F                     	;# 
   117  018C                     	;# 
   118  018D                     	;# 
   119  0000                     	;# 
   120  0001                     	;# 
   121  0002                     	;# 
   122  0003                     	;# 
   123  0004                     	;# 
   124  0005                     	;# 
   125  0006                     	;# 
   126  0007                     	;# 
   127  0008                     	;# 
   128  0009                     	;# 
   129  000A                     	;# 
   130  000B                     	;# 
   131  000C                     	;# 
   132  000D                     	;# 
   133  000E                     	;# 
   134  000E                     	;# 
   135  000F                     	;# 
   136  0010                     	;# 
   137  0011                     	;# 
   138  0012                     	;# 
   139  0013                     	;# 
   140  0014                     	;# 
   141  0015                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001A                     	;# 
   148  001B                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001D                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  0081                     	;# 
   155  0085                     	;# 
   156  0086                     	;# 
   157  0087                     	;# 
   158  0088                     	;# 
   159  0089                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  0091                     	;# 
   164  0092                     	;# 
   165  0093                     	;# 
   166  0094                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  009F                     	;# 
   173  010C                     	;# 
   174  010D                     	;# 
   175  010E                     	;# 
   176  010F                     	;# 
   177  018C                     	;# 
   178  018D                     	;# 
   179                           
   180                           	psect	idataBANK0
   181  0579                     __pidataBANK0:
   182                           
   183                           ;initializer for _nro_pin
   184  0579  3407               	retlw	7
   185                           
   186                           	psect	strings
   187  0003                     __pstrings:
   188  0003                     stringtab:
   189  0003                     __stringtab:
   190  0003                     stringcode:	
   191                           ;	String table - string pointers are 1 byte each
   192                           
   193  0003                     stringdir:
   194  0003  3000               	movlw	high stringdir
   195  0004  008A               	movwf	10
   196  0005  0804               	movf	4,w
   197  0006  0A84               	incf	4,f
   198  0007  0782               	addwf	2,f
   199  0008                     __stringbase:
   200  0008  3400               	retlw	0
   201  0009                     __end_of__stringtab:
   202  0009                     _dpowers:
   203  0009  3401               	retlw	1
   204  000A  3400               	retlw	0
   205  000B  340A               	retlw	10
   206  000C  3400               	retlw	0
   207  000D  3464               	retlw	100
   208  000E  3400               	retlw	0
   209  000F  34E8               	retlw	232
   210  0010  3403               	retlw	3
   211  0011  3410               	retlw	16
   212  0012  3427               	retlw	39
   213  0013                     __end_of_dpowers:
   214  0009                     _PORTE	set	9
   215  0008                     _PORTD	set	8
   216  0007                     _PORTC	set	7
   217  0005                     _PORTA	set	5
   218  0006                     _PORTB	set	6
   219  001E                     _ADRESH	set	30
   220  001F                     _ADCON0	set	31
   221  0019                     _TXREG	set	25
   222  0018                     _RCSTAbits	set	24
   223  004A                     _RE2	set	74
   224  0049                     _RE1	set	73
   225  0048                     _RE0	set	72
   226  00FA                     _GO_nDONE	set	250
   227  0089                     _TRISE	set	137
   228  0088                     _TRISD	set	136
   229  0087                     _TRISC	set	135
   230  0085                     _TRISA	set	133
   231  0086                     _TRISB	set	134
   232  009E                     _ADRESL	set	158
   233  009F                     _ADCON1	set	159
   234  0099                     _SPBRG	set	153
   235  0098                     _TXSTAbits	set	152
   236  0013                     STR_2:
   237  0013  3441               	retlw	65	;'A'
   238  0014  344E               	retlw	78	;'N'
   239  0015  3437               	retlw	55	;'7'
   240  0016  3420               	retlw	32	;' '
   241  0017  343D               	retlw	61	;'='
   242  0018  3420               	retlw	32	;' '
   243  0019  3425               	retlw	37	;'%'
   244  001A  3475               	retlw	117	;'u'
   245  001B  340D               	retlw	13
   246  001C  340A               	retlw	10
   247  001D  3400               	retlw	0
   248  001E                     STR_1:
   249  001E  3469               	retlw	105	;'i'
   250  001F  346E               	retlw	110	;'n'
   251  0020  3469               	retlw	105	;'i'
   252  0021  3463               	retlw	99	;'c'
   253  0022  3469               	retlw	105	;'i'
   254  0023  346F               	retlw	111	;'o'
   255  0024  3400               	retlw	0
   256                           
   257                           	psect	cinit
   258  07EF                     start_initialization:	
   259                           ; #config settings
   260                           
   261  07EF                     __initialization:
   262                           
   263                           ; Initialize objects allocated to BANK0
   264  07EF  120A  118A  2579  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   265  07F4  00B8               	movwf	__pdataBANK0& (0+127)
   266                           
   267                           ; Clear objects allocated to BANK0
   268  07F5  01B1               	clrf	__pbssBANK0& (0+127)
   269  07F6  01B2               	clrf	(__pbssBANK0+1)& (0+127)
   270  07F7  01B3               	clrf	(__pbssBANK0+2)& (0+127)
   271  07F8  01B4               	clrf	(__pbssBANK0+3)& (0+127)
   272  07F9  01B5               	clrf	(__pbssBANK0+4)& (0+127)
   273  07FA  01B6               	clrf	(__pbssBANK0+5)& (0+127)
   274  07FB  01B7               	clrf	(__pbssBANK0+6)& (0+127)
   275  07FC                     end_of_initialization:	
   276                           ;End of C runtime variable initialization code
   277                           
   278  07FC                     __end_of__initialization:
   279  07FC  0183               	clrf	3
   280  07FD  120A  118A  2F1B   	ljmp	_main	;jump to C main() function
   281                           
   282                           	psect	bssBANK0
   283  0031                     __pbssBANK0:
   284  0031                     _caso:
   285  0031                     	ds	1
   286  0032                     _xx:
   287  0032                     	ds	1
   288  0033                     _prueba:
   289  0033                     	ds	1
   290  0034                     _port_act:
   291  0034                     	ds	1
   292  0035                     _mask:
   293  0035                     	ds	1
   294  0036                     _puerto:
   295  0036                     	ds	1
   296  0037                     _incremento:
   297  0037                     	ds	1
   298                           
   299                           	psect	dataBANK0
   300  0038                     __pdataBANK0:
   301  0038                     _nro_pin:
   302  0038                     	ds	1
   303                           
   304                           	psect	cstackCOMMON
   305  0070                     __pcstackCOMMON:
   306  0070                     ?_UART_Init:
   307  0070                     ??_UART_Init:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_UART_Write:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ??_UART_Write:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_putch:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ?_ADC_Init:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ??_ADC_Init:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ?_main:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     ?_ADC_Read:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ?___lwdiv:	
   332                           ; 2 bytes @ 0x0
   333                           
   334  0070                     UART_Write@data:	
   335                           ; 2 bytes @ 0x0
   336                           
   337  0070                     ___lwdiv@divisor:	
   338                           ; 1 bytes @ 0x0
   339                           
   340                           
   341                           ; 2 bytes @ 0x0
   342  0070                     	ds	1
   343  0071                     ??_putch:
   344  0071                     putch@data:	
   345                           ; 1 bytes @ 0x1
   346                           
   347                           
   348                           ; 1 bytes @ 0x1
   349  0071                     	ds	1
   350  0072                     ??_ADC_Read:
   351  0072                     ___lwdiv@dividend:	
   352                           ; 1 bytes @ 0x2
   353                           
   354                           
   355                           ; 2 bytes @ 0x2
   356  0072                     	ds	2
   357  0074                     ??___lwdiv:
   358  0074                     ADC_Read@channel:	
   359                           ; 1 bytes @ 0x4
   360                           
   361                           
   362                           ; 1 bytes @ 0x4
   363  0074                     	ds	1
   364  0075                     ___lwdiv@quotient:
   365                           
   366                           ; 2 bytes @ 0x5
   367  0075                     	ds	2
   368  0077                     ___lwdiv@counter:
   369                           
   370                           ; 1 bytes @ 0x7
   371  0077                     	ds	1
   372  0078                     ?___lwmod:
   373  0078                     ___lwmod@divisor:	
   374                           ; 2 bytes @ 0x8
   375                           
   376                           
   377                           ; 2 bytes @ 0x8
   378  0078                     	ds	2
   379  007A                     ___lwmod@dividend:
   380                           
   381                           ; 2 bytes @ 0xA
   382  007A                     	ds	2
   383  007C                     ??___lwmod:
   384                           
   385                           ; 1 bytes @ 0xC
   386  007C                     	ds	1
   387  007D                     ___lwmod@counter:
   388                           
   389                           ; 1 bytes @ 0xD
   390  007D                     	ds	1
   391                           
   392                           	psect	cstackBANK0
   393  0020                     __pcstackBANK0:
   394  0020                     ?_printf:
   395                           
   396                           ; 2 bytes @ 0x0
   397  0020                     	ds	2
   398  0022                     ??_printf:
   399                           
   400                           ; 1 bytes @ 0x2
   401  0022                     	ds	3
   402  0025                     printf@flag:
   403                           
   404                           ; 1 bytes @ 0x5
   405  0025                     	ds	1
   406  0026                     printf@ap:
   407                           
   408                           ; 1 bytes @ 0x6
   409  0026                     	ds	1
   410  0027                     printf@val:
   411                           
   412                           ; 2 bytes @ 0x7
   413  0027                     	ds	2
   414  0029                     printf@prec:
   415                           
   416                           ; 1 bytes @ 0x9
   417  0029                     	ds	1
   418  002A                     printf@f:
   419                           
   420                           ; 1 bytes @ 0xA
   421  002A                     	ds	1
   422  002B                     printf@c:
   423                           
   424                           ; 1 bytes @ 0xB
   425  002B                     	ds	1
   426  002C                     ??_main:
   427                           
   428                           ; 1 bytes @ 0xC
   429  002C                     	ds	3
   430  002F                     main@valor:
   431                           
   432                           ; 2 bytes @ 0xF
   433  002F                     	ds	2
   434                           
   435                           	psect	maintext
   436  071B                     __pmaintext:	
   437 ;;
   438 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   439 ;;
   440 ;; *************** function _main *****************
   441 ;; Defined at:
   442 ;;		line 79 in file "Probador1.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;  valor           2   15[BANK0 ] unsigned int 
   447 ;; Return value:  Size  Location     Type
   448 ;;                  1    wreg      void 
   449 ;; Registers used:
   450 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   451 ;; Tracked objects:
   452 ;;		On entry : B00/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   456 ;;      Params:         0       0       0       0       0
   457 ;;      Locals:         0       2       0       0       0
   458 ;;      Temps:          0       3       0       0       0
   459 ;;      Totals:         0       5       0       0       0
   460 ;;Total ram usage:        5 bytes
   461 ;; Hardware stack levels required when called: 3
   462 ;; This function calls:
   463 ;;		_ADC_Init
   464 ;;		_ADC_Read
   465 ;;		_UART_Init
   466 ;;		_printf
   467 ;; This function is called by:
   468 ;;		Startup code after reset
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472  071B                     _main:	
   473                           ;psect for function _main
   474                           
   475  071B                     l1453:	
   476                           ;incstack = 0
   477                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   478                           
   479                           
   480                           ;Probador1.c: 80:     UART_Init();
   481  071B  120A  118A  258E  120A  118A  	fcall	_UART_Init
   482                           
   483                           ;Probador1.c: 81:     ADC_Init();
   484  0720  120A  118A  259D  120A  118A  	fcall	_ADC_Init
   485  0725                     l1455:
   486                           
   487                           ;Probador1.c: 82:     TRISB = 0b00000000;
   488  0725  1683               	bsf	3,5	;RP0=1, select bank1
   489  0726  1303               	bcf	3,6	;RP1=0, select bank1
   490  0727  0186               	clrf	6	;volatile
   491  0728                     l1457:
   492                           
   493                           ;Probador1.c: 85:     printf("inicio");
   494  0728  3016               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   495  0729  120A  118A  2658  120A  118A  	fcall	_printf
   496  072E                     l1459:
   497                           
   498                           ;Probador1.c: 89:         unsigned int valor = ADC_Read(0);
   499  072E  3000               	movlw	0
   500  072F  120A  118A  25AF  120A  118A  	fcall	_ADC_Read
   501  0734  0871               	movf	?_ADC_Read+1,w
   502  0735  1283               	bcf	3,5	;RP0=0, select bank0
   503  0736  1303               	bcf	3,6	;RP1=0, select bank0
   504  0737  00B0               	movwf	main@valor+1
   505  0738  0870               	movf	?_ADC_Read,w
   506  0739  00AF               	movwf	main@valor
   507  073A                     l1461:
   508                           
   509                           ;Probador1.c: 90:         printf("AN7 = %u\r\n", valor);
   510  073A  0830               	movf	main@valor+1,w
   511  073B  00A1               	movwf	?_printf+1
   512  073C  082F               	movf	main@valor,w
   513  073D  00A0               	movwf	?_printf
   514  073E  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   515  073F  120A  118A  2658  120A  118A  	fcall	_printf
   516  0744                     l1463:
   517                           
   518                           ;Probador1.c: 91:         if (valor >= 0 & valor < 125 ){
   519  0744  3000               	movlw	0
   520  0745  1283               	bcf	3,5	;RP0=0, select bank0
   521  0746  1303               	bcf	3,6	;RP1=0, select bank0
   522  0747  0230               	subwf	main@valor+1,w
   523  0748  307D               	movlw	125
   524  0749  1903               	skipnz
   525  074A  022F               	subwf	main@valor,w
   526  074B  1803               	skipnc
   527  074C  2F4E               	goto	u1031
   528  074D  2F4F               	goto	u1030
   529  074E                     u1031:
   530  074E  2F51               	goto	l103
   531  074F                     u1030:
   532  074F                     l1465:
   533                           
   534                           ;Probador1.c: 92:             PORTB = 0b010000000;
   535  074F  3080               	movlw	128
   536  0750  0086               	movwf	6	;volatile
   537  0751                     l103:	
   538                           ;Probador1.c: 93:         }
   539                           
   540                           
   541                           ;Probador1.c: 94:         if (valor >= 125 & valor < 250 ){
   542  0751  3000               	movlw	0
   543  0752  0230               	subwf	main@valor+1,w
   544  0753  307D               	movlw	125
   545  0754  1903               	skipnz
   546  0755  022F               	subwf	main@valor,w
   547  0756  1C03               	skipc
   548  0757  2F59               	goto	u1041
   549  0758  2F5A               	goto	u1040
   550  0759                     u1041:
   551  0759  2F65               	goto	l104
   552  075A                     u1040:
   553  075A                     l1467:
   554  075A  3000               	movlw	0
   555  075B  0230               	subwf	main@valor+1,w
   556  075C  30FA               	movlw	250
   557  075D  1903               	skipnz
   558  075E  022F               	subwf	main@valor,w
   559  075F  1803               	skipnc
   560  0760  2F62               	goto	u1051
   561  0761  2F63               	goto	u1050
   562  0762                     u1051:
   563  0762  2F65               	goto	l104
   564  0763                     u1050:
   565  0763                     l1469:
   566                           
   567                           ;Probador1.c: 95:             PORTB = 0b11000000;
   568  0763  30C0               	movlw	192
   569  0764  0086               	movwf	6	;volatile
   570  0765                     l104:	
   571                           ;Probador1.c: 96:         }
   572                           
   573                           
   574                           ;Probador1.c: 97:         if (valor >= 250 & valor < 375 ){
   575  0765  3000               	movlw	0
   576  0766  0230               	subwf	main@valor+1,w
   577  0767  30FA               	movlw	250
   578  0768  1903               	skipnz
   579  0769  022F               	subwf	main@valor,w
   580  076A  1C03               	skipc
   581  076B  2F6D               	goto	u1061
   582  076C  2F6E               	goto	u1060
   583  076D                     u1061:
   584  076D  2F79               	goto	l105
   585  076E                     u1060:
   586  076E                     l1471:
   587  076E  3001               	movlw	1
   588  076F  0230               	subwf	main@valor+1,w
   589  0770  3077               	movlw	119
   590  0771  1903               	skipnz
   591  0772  022F               	subwf	main@valor,w
   592  0773  1803               	skipnc
   593  0774  2F76               	goto	u1071
   594  0775  2F77               	goto	u1070
   595  0776                     u1071:
   596  0776  2F79               	goto	l105
   597  0777                     u1070:
   598  0777                     l1473:
   599                           
   600                           ;Probador1.c: 98:             PORTB = 0b11100000;
   601  0777  30E0               	movlw	224
   602  0778  0086               	movwf	6	;volatile
   603  0779                     l105:	
   604                           ;Probador1.c: 99:         }
   605                           
   606                           
   607                           ;Probador1.c: 100:         if (valor >= 375 & valor < 500 ){
   608  0779  3001               	movlw	1
   609  077A  0230               	subwf	main@valor+1,w
   610  077B  3077               	movlw	119
   611  077C  1903               	skipnz
   612  077D  022F               	subwf	main@valor,w
   613  077E  1C03               	skipc
   614  077F  2F81               	goto	u1081
   615  0780  2F82               	goto	u1080
   616  0781                     u1081:
   617  0781  2F8D               	goto	l106
   618  0782                     u1080:
   619  0782                     l1475:
   620  0782  3001               	movlw	1
   621  0783  0230               	subwf	main@valor+1,w
   622  0784  30F4               	movlw	244
   623  0785  1903               	skipnz
   624  0786  022F               	subwf	main@valor,w
   625  0787  1803               	skipnc
   626  0788  2F8A               	goto	u1091
   627  0789  2F8B               	goto	u1090
   628  078A                     u1091:
   629  078A  2F8D               	goto	l106
   630  078B                     u1090:
   631  078B                     l1477:
   632                           
   633                           ;Probador1.c: 101:             PORTB = 0b11110000;
   634  078B  30F0               	movlw	240
   635  078C  0086               	movwf	6	;volatile
   636  078D                     l106:	
   637                           ;Probador1.c: 102:         }
   638                           
   639                           
   640                           ;Probador1.c: 103:         if (valor >= 500 & valor < 625 ){
   641  078D  3001               	movlw	1
   642  078E  0230               	subwf	main@valor+1,w
   643  078F  30F4               	movlw	244
   644  0790  1903               	skipnz
   645  0791  022F               	subwf	main@valor,w
   646  0792  1C03               	skipc
   647  0793  2F95               	goto	u1101
   648  0794  2F96               	goto	u1100
   649  0795                     u1101:
   650  0795  2FA1               	goto	l107
   651  0796                     u1100:
   652  0796                     l1479:
   653  0796  3002               	movlw	2
   654  0797  0230               	subwf	main@valor+1,w
   655  0798  3071               	movlw	113
   656  0799  1903               	skipnz
   657  079A  022F               	subwf	main@valor,w
   658  079B  1803               	skipnc
   659  079C  2F9E               	goto	u1111
   660  079D  2F9F               	goto	u1110
   661  079E                     u1111:
   662  079E  2FA1               	goto	l107
   663  079F                     u1110:
   664  079F                     l1481:
   665                           
   666                           ;Probador1.c: 104:             PORTB = 0b11111000;
   667  079F  30F8               	movlw	248
   668  07A0  0086               	movwf	6	;volatile
   669  07A1                     l107:	
   670                           ;Probador1.c: 105:         }
   671                           
   672                           
   673                           ;Probador1.c: 106:         if (valor >= 625 & valor < 750 ){
   674  07A1  3002               	movlw	2
   675  07A2  0230               	subwf	main@valor+1,w
   676  07A3  3071               	movlw	113
   677  07A4  1903               	skipnz
   678  07A5  022F               	subwf	main@valor,w
   679  07A6  1C03               	skipc
   680  07A7  2FA9               	goto	u1121
   681  07A8  2FAA               	goto	u1120
   682  07A9                     u1121:
   683  07A9  2FB5               	goto	l108
   684  07AA                     u1120:
   685  07AA                     l1483:
   686  07AA  3002               	movlw	2
   687  07AB  0230               	subwf	main@valor+1,w
   688  07AC  30EE               	movlw	238
   689  07AD  1903               	skipnz
   690  07AE  022F               	subwf	main@valor,w
   691  07AF  1803               	skipnc
   692  07B0  2FB2               	goto	u1131
   693  07B1  2FB3               	goto	u1130
   694  07B2                     u1131:
   695  07B2  2FB5               	goto	l108
   696  07B3                     u1130:
   697  07B3                     l1485:
   698                           
   699                           ;Probador1.c: 107:             PORTB = 0b11111100;
   700  07B3  30FC               	movlw	252
   701  07B4  0086               	movwf	6	;volatile
   702  07B5                     l108:	
   703                           ;Probador1.c: 108:         }
   704                           
   705                           
   706                           ;Probador1.c: 109:         if (valor >= 750 & valor < 875 ){
   707  07B5  3002               	movlw	2
   708  07B6  0230               	subwf	main@valor+1,w
   709  07B7  30EE               	movlw	238
   710  07B8  1903               	skipnz
   711  07B9  022F               	subwf	main@valor,w
   712  07BA  1C03               	skipc
   713  07BB  2FBD               	goto	u1141
   714  07BC  2FBE               	goto	u1140
   715  07BD                     u1141:
   716  07BD  2FC9               	goto	l109
   717  07BE                     u1140:
   718  07BE                     l1487:
   719  07BE  3003               	movlw	3
   720  07BF  0230               	subwf	main@valor+1,w
   721  07C0  306B               	movlw	107
   722  07C1  1903               	skipnz
   723  07C2  022F               	subwf	main@valor,w
   724  07C3  1803               	skipnc
   725  07C4  2FC6               	goto	u1151
   726  07C5  2FC7               	goto	u1150
   727  07C6                     u1151:
   728  07C6  2FC9               	goto	l109
   729  07C7                     u1150:
   730  07C7                     l1489:
   731                           
   732                           ;Probador1.c: 110:             PORTB = 0b11111110;
   733  07C7  30FE               	movlw	254
   734  07C8  0086               	movwf	6	;volatile
   735  07C9                     l109:	
   736                           ;Probador1.c: 111:         }
   737                           
   738                           
   739                           ;Probador1.c: 112:         if (valor >= 875 & valor < 1025 ){
   740  07C9  3003               	movlw	3
   741  07CA  0230               	subwf	main@valor+1,w
   742  07CB  306B               	movlw	107
   743  07CC  1903               	skipnz
   744  07CD  022F               	subwf	main@valor,w
   745  07CE  1C03               	skipc
   746  07CF  2FD1               	goto	u1161
   747  07D0  2FD2               	goto	u1160
   748  07D1                     u1161:
   749  07D1  2FDD               	goto	l110
   750  07D2                     u1160:
   751  07D2                     l1491:
   752  07D2  3004               	movlw	4
   753  07D3  0230               	subwf	main@valor+1,w
   754  07D4  3001               	movlw	1
   755  07D5  1903               	skipnz
   756  07D6  022F               	subwf	main@valor,w
   757  07D7  1803               	skipnc
   758  07D8  2FDA               	goto	u1171
   759  07D9  2FDB               	goto	u1170
   760  07DA                     u1171:
   761  07DA  2FDD               	goto	l110
   762  07DB                     u1170:
   763  07DB                     l1493:
   764                           
   765                           ;Probador1.c: 113:             PORTB = 0b11111111;
   766  07DB  30FF               	movlw	255
   767  07DC  0086               	movwf	6	;volatile
   768  07DD                     l110:	
   769                           ;Probador1.c: 114:         }
   770                           
   771                           
   772                           ;Probador1.c: 116:         _delay((unsigned long)((500)*(4000000UL/4000.0)));
   773  07DD  3003               	movlw	3
   774  07DE  1283               	bcf	3,5	;RP0=0, select bank0
   775  07DF  1303               	bcf	3,6	;RP1=0, select bank0
   776  07E0  00AE               	movwf	??_main+2
   777  07E1  308A               	movlw	138
   778  07E2  00AD               	movwf	??_main+1
   779  07E3  3055               	movlw	85
   780  07E4  00AC               	movwf	??_main
   781  07E5                     u1647:
   782  07E5  0BAC               	decfsz	??_main,f
   783  07E6  2FE5               	goto	u1647
   784  07E7  0BAD               	decfsz	??_main+1,f
   785  07E8  2FE5               	goto	u1647
   786  07E9  0BAE               	decfsz	??_main+2,f
   787  07EA  2FE5               	goto	u1647
   788  07EB  2F2E               	goto	l1459
   789  07EC  120A  118A  2800   	ljmp	start
   790  07EF                     __end_of_main:
   791                           
   792                           	psect	text1
   793  0658                     __ptext1:	
   794 ;; *************** function _printf *****************
   795 ;; Defined at:
   796 ;;		line 477 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;  f               1    wreg     PTR const unsigned char 
   799 ;;		 -> STR_2(11), STR_1(7), 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;  f               1   10[BANK0 ] PTR const unsigned char 
   802 ;;		 -> STR_2(11), STR_1(7), 
   803 ;;  tmpval          4    0        struct .
   804 ;;  val             2    7[BANK0 ] unsigned int 
   805 ;;  cp              2    0        PTR const unsigned char 
   806 ;;  len             2    0        unsigned int 
   807 ;;  c               1   11[BANK0 ] unsigned char 
   808 ;;  prec            1    9[BANK0 ] char 
   809 ;;  ap              1    6[BANK0 ] PTR void [1]
   810 ;;		 -> ?_printf(2), 
   811 ;;  flag            1    5[BANK0 ] unsigned char 
   812 ;; Return value:  Size  Location     Type
   813 ;;                  2    0[BANK0 ] int 
   814 ;; Registers used:
   815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   816 ;; Tracked objects:
   817 ;;		On entry : 0/0
   818 ;;		On exit  : 0/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   821 ;;      Params:         0       2       0       0       0
   822 ;;      Locals:         0       7       0       0       0
   823 ;;      Temps:          0       3       0       0       0
   824 ;;      Totals:         0      12       0       0       0
   825 ;;Total ram usage:       12 bytes
   826 ;; Hardware stack levels used: 1
   827 ;; Hardware stack levels required when called: 2
   828 ;; This function calls:
   829 ;;		___lwdiv
   830 ;;		___lwmod
   831 ;;		_putch
   832 ;; This function is called by:
   833 ;;		_main
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837  0658                     _printf:	
   838                           ;psect for function _printf
   839                           
   840                           
   841                           ;incstack = 0
   842                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   843                           ;printf@f stored from wreg
   844  0658  1283               	bcf	3,5	;RP0=0, select bank0
   845  0659  1303               	bcf	3,6	;RP1=0, select bank0
   846  065A  00AA               	movwf	printf@f
   847  065B                     l1409:
   848                           
   849                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 477: printf(const
      +                           char * f, ...);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 47
      +                          8: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 479:  va_list
      +                           ap;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 512:  char c;
      +                          ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 521:  signed char
      +                           prec;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 525:  unsig
      +                          ned char flag;
   850  065B  3020               	movlw	(low (?_printf| 0))& (0+255)
   851  065C  00A2               	movwf	??_printf
   852  065D  0822               	movf	??_printf,w
   853  065E  00A6               	movwf	printf@ap
   854                           
   855                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   856  065F  2F06               	goto	l1447
   857  0660                     l1411:
   858                           
   859                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   860  0660  3025               	movlw	37
   861  0661  062B               	xorwf	printf@c,w
   862  0662  1903               	btfsc	3,2
   863  0663  2E65               	goto	u981
   864  0664  2E66               	goto	u980
   865  0665                     u981:
   866  0665  2E6D               	goto	l1415
   867  0666                     u980:
   868  0666                     l1413:
   869                           
   870                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 558:    (putch(c) );
   871  0666  082B               	movf	printf@c,w
   872  0667  120A  118A  257A  120A  118A  	fcall	_putch
   873                           
   874                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 559:    continue;
   875  066C  2F06               	goto	l1447
   876  066D                     l1415:
   877                           
   878                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   879  066D  01A5               	clrf	printf@flag
   880                           
   881                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   882  066E  2E74               	goto	l1421
   883  066F                     l1417:
   884                           
   885                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 844:    flag |= 0
      +                          xC0;
   886  066F  30C0               	movlw	192
   887  0670  00A2               	movwf	??_printf
   888  0671  0822               	movf	??_printf,w
   889  0672  04A5               	iorwf	printf@flag,f
   890                           
   891                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 845:    break;
   892  0673  2E8E               	goto	l1423
   893  0674                     l1421:
   894  0674  3001               	movlw	1
   895  0675  07AA               	addwf	printf@f,f
   896  0676  30FF               	movlw	-1
   897  0677  072A               	addwf	printf@f,w
   898  0678  0084               	movwf	4
   899  0679  120A  118A  2003  120A  118A  	fcall	stringdir
   900  067E  00AB               	movwf	printf@c
   901  067F  00A2               	movwf	??_printf
   902  0680  01A3               	clrf	??_printf+1
   903                           
   904                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   905                           ; Switch size 1, requested type "simple"
   906                           ; Number of cases is 1, Range of values is 0 to 0
   907                           ; switch strategies available:
   908                           ; Name         Instructions Cycles
   909                           ; simple_byte            4     3 (average)
   910                           ; direct_byte           11     8 (fixed)
   911                           ; jumptable            260     6 (fixed)
   912                           ;	Chosen strategy is simple_byte
   913  0681  0823               	movf	??_printf+1,w
   914  0682  3A00               	xorlw	0	; case 0
   915  0683  1903               	skipnz
   916  0684  2E86               	goto	l1811
   917  0685  2F06               	goto	l1447
   918  0686                     l1811:
   919                           
   920                           ; Switch size 1, requested type "simple"
   921                           ; Number of cases is 2, Range of values is 0 to 117
   922                           ; switch strategies available:
   923                           ; Name         Instructions Cycles
   924                           ; simple_byte            7     4 (average)
   925                           ; jumptable            260     6 (fixed)
   926                           ;	Chosen strategy is simple_byte
   927  0686  0822               	movf	??_printf,w
   928  0687  3A00               	xorlw	0	; case 0
   929  0688  1903               	skipnz
   930  0689  2F1A               	goto	l345
   931  068A  3A75               	xorlw	117	; case 117
   932  068B  1903               	skipnz
   933  068C  2E6F               	goto	l1417
   934  068D  2F06               	goto	l1447
   935  068E                     l1423:
   936                           
   937                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1299:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1312:     val = (*(unsign
      +                          ed *)__va_arg((*(unsigned **)ap), (unsigned)0));
   938  068E  0826               	movf	printf@ap,w
   939  068F  0084               	movwf	4
   940  0690  1383               	bcf	3,7	;select IRP bank0
   941  0691  0800               	movf	0,w
   942  0692  00A7               	movwf	printf@val
   943  0693  0A84               	incf	4,f
   944  0694  0800               	movf	0,w
   945  0695  00A8               	movwf	printf@val+1
   946  0696                     l1425:
   947  0696  3002               	movlw	2
   948  0697  00A2               	movwf	??_printf
   949  0698  0822               	movf	??_printf,w
   950  0699  07A6               	addwf	printf@ap,f
   951  069A                     l1427:
   952                           
   953                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1313:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
   954  069A  01AB               	clrf	printf@c
   955  069B  0AAB               	incf	printf@c,f
   956  069C                     l1433:
   957                           
   958                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
   959  069C  082B               	movf	printf@c,w
   960  069D  00A2               	movwf	??_printf
   961  069E  0722               	addwf	??_printf,w
   962  069F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   963  06A0  0084               	movwf	4
   964  06A1  120A  118A  2003  120A  118A  	fcall	stringdir
   965  06A6  00A3               	movwf	??_printf+1
   966  06A7  120A  118A  2003  120A  118A  	fcall	stringdir
   967  06AC  00A4               	movwf	??_printf+2
   968  06AD  0824               	movf	??_printf+2,w
   969  06AE  0228               	subwf	printf@val+1,w
   970  06AF  1D03               	skipz
   971  06B0  2EB3               	goto	u995
   972  06B1  0823               	movf	??_printf+1,w
   973  06B2  0227               	subwf	printf@val,w
   974  06B3                     u995:
   975  06B3  1803               	skipnc
   976  06B4  2EB6               	goto	u991
   977  06B5  2EB7               	goto	u990
   978  06B6                     u991:
   979  06B6  2EB8               	goto	l1437
   980  06B7                     u990:
   981  06B7  2EC2               	goto	l1439
   982  06B8                     l1437:
   983  06B8  3001               	movlw	1
   984  06B9  00A2               	movwf	??_printf
   985  06BA  0822               	movf	??_printf,w
   986  06BB  07AB               	addwf	printf@c,f
   987  06BC  3005               	movlw	5
   988  06BD  062B               	xorwf	printf@c,w
   989  06BE  1D03               	btfss	3,2
   990  06BF  2EC1               	goto	u1001
   991  06C0  2EC2               	goto	u1000
   992  06C1                     u1001:
   993  06C1  2E9C               	goto	l1433
   994  06C2                     u1000:
   995  06C2                     l1439:
   996                           
   997                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1495:   };C:\Program File
      +                          s\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   998  06C2  082B               	movf	printf@c,w
   999  06C3  00A2               	movwf	??_printf
  1000  06C4  0822               	movf	??_printf,w
  1001  06C5  00A9               	movwf	printf@prec
  1002                           
  1003                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1004  06C6  2EFB               	goto	l1445
  1005  06C7                     l1441:
  1006                           
  1007                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1008  06C7  300A               	movlw	10
  1009  06C8  00F8               	movwf	___lwmod@divisor
  1010  06C9  3000               	movlw	0
  1011  06CA  00F9               	movwf	___lwmod@divisor+1
  1012  06CB  0829               	movf	printf@prec,w
  1013  06CC  00A2               	movwf	??_printf
  1014  06CD  0722               	addwf	??_printf,w
  1015  06CE  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1016  06CF  0084               	movwf	4
  1017  06D0  120A  118A  2003  120A  118A  	fcall	stringdir
  1018  06D5  00F0               	movwf	___lwdiv@divisor
  1019  06D6  120A  118A  2003  120A  118A  	fcall	stringdir
  1020  06DB  00F1               	movwf	___lwdiv@divisor+1
  1021  06DC  0828               	movf	printf@val+1,w
  1022  06DD  00F3               	movwf	___lwdiv@dividend+1
  1023  06DE  0827               	movf	printf@val,w
  1024  06DF  00F2               	movwf	___lwdiv@dividend
  1025  06E0  120A  118A  2614  120A  118A  	fcall	___lwdiv
  1026  06E5  0871               	movf	?___lwdiv+1,w
  1027  06E6  00FB               	movwf	___lwmod@dividend+1
  1028  06E7  0870               	movf	?___lwdiv,w
  1029  06E8  00FA               	movwf	___lwmod@dividend
  1030  06E9  120A  118A  25DA  120A  118A  	fcall	___lwmod
  1031  06EE  0878               	movf	?___lwmod,w
  1032  06EF  3E30               	addlw	48
  1033  06F0  1283               	bcf	3,5	;RP0=0, select bank0
  1034  06F1  1303               	bcf	3,6	;RP1=0, select bank0
  1035  06F2  00A3               	movwf	??_printf+1
  1036  06F3  0823               	movf	??_printf+1,w
  1037  06F4  00AB               	movwf	printf@c
  1038  06F5                     l1443:
  1039                           
  1040                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1550:    (putch(c) );
  1041  06F5  082B               	movf	printf@c,w
  1042  06F6  120A  118A  257A  120A  118A  	fcall	_putch
  1043  06FB                     l1445:
  1044                           
  1045                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1046  06FB  30FF               	movlw	255
  1047  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  1048  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  1049  06FE  00A2               	movwf	??_printf
  1050  06FF  0822               	movf	??_printf,w
  1051  0700  07A9               	addwf	printf@prec,f
  1052  0701  0A29               	incf	printf@prec,w
  1053  0702  1D03               	btfss	3,2
  1054  0703  2F05               	goto	u1011
  1055  0704  2F06               	goto	u1010
  1056  0705                     u1011:
  1057  0705  2EC7               	goto	l1441
  1058  0706                     u1010:
  1059  0706                     l1447:
  1060                           
  1061                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1062  0706  3001               	movlw	1
  1063  0707  1283               	bcf	3,5	;RP0=0, select bank0
  1064  0708  1303               	bcf	3,6	;RP1=0, select bank0
  1065  0709  07AA               	addwf	printf@f,f
  1066  070A  30FF               	movlw	-1
  1067  070B  072A               	addwf	printf@f,w
  1068  070C  0084               	movwf	4
  1069  070D  120A  118A  2003  120A  118A  	fcall	stringdir
  1070  0712  00A2               	movwf	??_printf
  1071  0713  0822               	movf	??_printf,w
  1072  0714  00AB               	movwf	printf@c
  1073  0715  082B               	movf	printf@c,w
  1074  0716  1D03               	btfss	3,2
  1075  0717  2F19               	goto	u1021
  1076  0718  2F1A               	goto	u1020
  1077  0719                     u1021:
  1078  0719  2E60               	goto	l1411
  1079  071A                     u1020:
  1080  071A                     l345:
  1081  071A  0008               	return
  1082  071B                     __end_of_printf:
  1083                           
  1084                           	psect	text2
  1085  057A                     __ptext2:	
  1086 ;; *************** function _putch *****************
  1087 ;; Defined at:
  1088 ;;		line 58 in file "Probador1.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;  data            1    wreg     unsigned char 
  1091 ;; Auto vars:     Size  Location     Type
  1092 ;;  data            1    1[COMMON] unsigned char 
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  1    wreg      void 
  1095 ;; Registers used:
  1096 ;;		wreg, status,2, status,0, pclath, cstack
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1102 ;;      Params:         0       0       0       0       0
  1103 ;;      Locals:         1       0       0       0       0
  1104 ;;      Temps:          0       0       0       0       0
  1105 ;;      Totals:         1       0       0       0       0
  1106 ;;Total ram usage:        1 bytes
  1107 ;; Hardware stack levels used: 1
  1108 ;; Hardware stack levels required when called: 1
  1109 ;; This function calls:
  1110 ;;		_UART_Write
  1111 ;; This function is called by:
  1112 ;;		_printf
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116  057A                     _putch:	
  1117                           ;psect for function _putch
  1118                           
  1119                           
  1120                           ;incstack = 0
  1121                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  1122                           ;putch@data stored from wreg
  1123  057A  00F1               	movwf	putch@data
  1124  057B                     l1337:
  1125                           
  1126                           ;Probador1.c: 59:     UART_Write(data);
  1127  057B  0871               	movf	putch@data,w
  1128  057C  120A  118A  2582  120A  118A  	fcall	_UART_Write
  1129  0581                     l88:
  1130  0581  0008               	return
  1131  0582                     __end_of_putch:
  1132                           
  1133                           	psect	text3
  1134  0582                     __ptext3:	
  1135 ;; *************** function _UART_Write *****************
  1136 ;; Defined at:
  1137 ;;		line 53 in file "Probador1.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;  data            1    wreg     unsigned char 
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  data            1    0[COMMON] unsigned char 
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1151 ;;      Params:         0       0       0       0       0
  1152 ;;      Locals:         1       0       0       0       0
  1153 ;;      Temps:          0       0       0       0       0
  1154 ;;      Totals:         1       0       0       0       0
  1155 ;;Total ram usage:        1 bytes
  1156 ;; Hardware stack levels used: 1
  1157 ;; This function calls:
  1158 ;;		Nothing
  1159 ;; This function is called by:
  1160 ;;		_putch
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164  0582                     _UART_Write:	
  1165                           ;psect for function _UART_Write
  1166                           
  1167                           
  1168                           ;incstack = 0
  1169                           ; Regs used in _UART_Write: [wreg]
  1170                           ;UART_Write@data stored from wreg
  1171  0582  00F0               	movwf	UART_Write@data
  1172  0583                     l1333:
  1173  0583                     l82:	
  1174                           ;Probador1.c: 54:     while (!TXSTAbits.TRMT);
  1175                           
  1176  0583  1683               	bsf	3,5	;RP0=1, select bank1
  1177  0584  1303               	bcf	3,6	;RP1=0, select bank1
  1178  0585  1C98               	btfss	24,1	;volatile
  1179  0586  2D88               	goto	u821
  1180  0587  2D89               	goto	u820
  1181  0588                     u821:
  1182  0588  2D83               	goto	l82
  1183  0589                     u820:
  1184  0589                     l1335:
  1185                           
  1186                           ;Probador1.c: 55:     TXREG = data;
  1187  0589  0870               	movf	UART_Write@data,w
  1188  058A  1283               	bcf	3,5	;RP0=0, select bank0
  1189  058B  1303               	bcf	3,6	;RP1=0, select bank0
  1190  058C  0099               	movwf	25	;volatile
  1191  058D                     l85:
  1192  058D  0008               	return
  1193  058E                     __end_of_UART_Write:
  1194                           
  1195                           	psect	text4
  1196  05DA                     __ptext4:	
  1197 ;; *************** function ___lwmod *****************
  1198 ;; Defined at:
  1199 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  divisor         2    8[COMMON] unsigned int 
  1202 ;;  dividend        2   10[COMMON] unsigned int 
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  counter         1   13[COMMON] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  2    8[COMMON] unsigned int 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, status,0
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1214 ;;      Params:         4       0       0       0       0
  1215 ;;      Locals:         1       0       0       0       0
  1216 ;;      Temps:          1       0       0       0       0
  1217 ;;      Totals:         6       0       0       0       0
  1218 ;;Total ram usage:        6 bytes
  1219 ;; Hardware stack levels used: 1
  1220 ;; This function calls:
  1221 ;;		Nothing
  1222 ;; This function is called by:
  1223 ;;		_printf
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227  05DA                     ___lwmod:	
  1228                           ;psect for function ___lwmod
  1229                           
  1230  05DA                     l1365:	
  1231                           ;incstack = 0
  1232                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1233                           
  1234  05DA  0878               	movf	___lwmod@divisor,w
  1235  05DB  0479               	iorwf	___lwmod@divisor+1,w
  1236  05DC  1903               	btfsc	3,2
  1237  05DD  2DDF               	goto	u901
  1238  05DE  2DE0               	goto	u900
  1239  05DF                     u901:
  1240  05DF  2E0F               	goto	l1383
  1241  05E0                     u900:
  1242  05E0                     l1367:
  1243  05E0  01FD               	clrf	___lwmod@counter
  1244  05E1  0AFD               	incf	___lwmod@counter,f
  1245  05E2  2DEE               	goto	l1373
  1246  05E3                     l1369:
  1247  05E3  3001               	movlw	1
  1248  05E4                     u915:
  1249  05E4  1003               	clrc
  1250  05E5  0DF8               	rlf	___lwmod@divisor,f
  1251  05E6  0DF9               	rlf	___lwmod@divisor+1,f
  1252  05E7  3EFF               	addlw	-1
  1253  05E8  1D03               	skipz
  1254  05E9  2DE4               	goto	u915
  1255  05EA                     l1371:
  1256  05EA  3001               	movlw	1
  1257  05EB  00FC               	movwf	??___lwmod
  1258  05EC  087C               	movf	??___lwmod,w
  1259  05ED  07FD               	addwf	___lwmod@counter,f
  1260  05EE                     l1373:
  1261  05EE  1FF9               	btfss	___lwmod@divisor+1,7
  1262  05EF  2DF1               	goto	u921
  1263  05F0  2DF2               	goto	u920
  1264  05F1                     u921:
  1265  05F1  2DE3               	goto	l1369
  1266  05F2                     u920:
  1267  05F2                     l1375:
  1268  05F2  0879               	movf	___lwmod@divisor+1,w
  1269  05F3  027B               	subwf	___lwmod@dividend+1,w
  1270  05F4  1D03               	skipz
  1271  05F5  2DF8               	goto	u935
  1272  05F6  0878               	movf	___lwmod@divisor,w
  1273  05F7  027A               	subwf	___lwmod@dividend,w
  1274  05F8                     u935:
  1275  05F8  1C03               	skipc
  1276  05F9  2DFB               	goto	u931
  1277  05FA  2DFC               	goto	u930
  1278  05FB                     u931:
  1279  05FB  2E02               	goto	l1379
  1280  05FC                     u930:
  1281  05FC                     l1377:
  1282  05FC  0878               	movf	___lwmod@divisor,w
  1283  05FD  02FA               	subwf	___lwmod@dividend,f
  1284  05FE  0879               	movf	___lwmod@divisor+1,w
  1285  05FF  1C03               	skipc
  1286  0600  03FB               	decf	___lwmod@dividend+1,f
  1287  0601  02FB               	subwf	___lwmod@dividend+1,f
  1288  0602                     l1379:
  1289  0602  3001               	movlw	1
  1290  0603                     u945:
  1291  0603  1003               	clrc
  1292  0604  0CF9               	rrf	___lwmod@divisor+1,f
  1293  0605  0CF8               	rrf	___lwmod@divisor,f
  1294  0606  3EFF               	addlw	-1
  1295  0607  1D03               	skipz
  1296  0608  2E03               	goto	u945
  1297  0609                     l1381:
  1298  0609  3001               	movlw	1
  1299  060A  02FD               	subwf	___lwmod@counter,f
  1300  060B  1D03               	btfss	3,2
  1301  060C  2E0E               	goto	u951
  1302  060D  2E0F               	goto	u950
  1303  060E                     u951:
  1304  060E  2DF2               	goto	l1375
  1305  060F                     u950:
  1306  060F                     l1383:
  1307  060F  087B               	movf	___lwmod@dividend+1,w
  1308  0610  00F9               	movwf	?___lwmod+1
  1309  0611  087A               	movf	___lwmod@dividend,w
  1310  0612  00F8               	movwf	?___lwmod
  1311  0613                     l631:
  1312  0613  0008               	return
  1313  0614                     __end_of___lwmod:
  1314                           
  1315                           	psect	text5
  1316  0614                     __ptext5:	
  1317 ;; *************** function ___lwdiv *****************
  1318 ;; Defined at:
  1319 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  divisor         2    0[COMMON] unsigned int 
  1322 ;;  dividend        2    2[COMMON] unsigned int 
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;  quotient        2    5[COMMON] unsigned int 
  1325 ;;  counter         1    7[COMMON] unsigned char 
  1326 ;; Return value:  Size  Location     Type
  1327 ;;                  2    0[COMMON] unsigned int 
  1328 ;; Registers used:
  1329 ;;		wreg, status,2, status,0
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 0/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1335 ;;      Params:         4       0       0       0       0
  1336 ;;      Locals:         3       0       0       0       0
  1337 ;;      Temps:          1       0       0       0       0
  1338 ;;      Totals:         8       0       0       0       0
  1339 ;;Total ram usage:        8 bytes
  1340 ;; Hardware stack levels used: 1
  1341 ;; This function calls:
  1342 ;;		Nothing
  1343 ;; This function is called by:
  1344 ;;		_printf
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348  0614                     ___lwdiv:	
  1349                           ;psect for function ___lwdiv
  1350                           
  1351  0614                     l1339:	
  1352                           ;incstack = 0
  1353                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1354                           
  1355  0614  01F5               	clrf	___lwdiv@quotient
  1356  0615  01F6               	clrf	___lwdiv@quotient+1
  1357  0616                     l1341:
  1358  0616  0870               	movf	___lwdiv@divisor,w
  1359  0617  0471               	iorwf	___lwdiv@divisor+1,w
  1360  0618  1903               	btfsc	3,2
  1361  0619  2E1B               	goto	u831
  1362  061A  2E1C               	goto	u830
  1363  061B                     u831:
  1364  061B  2E53               	goto	l1361
  1365  061C                     u830:
  1366  061C                     l1343:
  1367  061C  01F7               	clrf	___lwdiv@counter
  1368  061D  0AF7               	incf	___lwdiv@counter,f
  1369  061E  2E2A               	goto	l1349
  1370  061F                     l1345:
  1371  061F  3001               	movlw	1
  1372  0620                     u845:
  1373  0620  1003               	clrc
  1374  0621  0DF0               	rlf	___lwdiv@divisor,f
  1375  0622  0DF1               	rlf	___lwdiv@divisor+1,f
  1376  0623  3EFF               	addlw	-1
  1377  0624  1D03               	skipz
  1378  0625  2E20               	goto	u845
  1379  0626                     l1347:
  1380  0626  3001               	movlw	1
  1381  0627  00F4               	movwf	??___lwdiv
  1382  0628  0874               	movf	??___lwdiv,w
  1383  0629  07F7               	addwf	___lwdiv@counter,f
  1384  062A                     l1349:
  1385  062A  1FF1               	btfss	___lwdiv@divisor+1,7
  1386  062B  2E2D               	goto	u851
  1387  062C  2E2E               	goto	u850
  1388  062D                     u851:
  1389  062D  2E1F               	goto	l1345
  1390  062E                     u850:
  1391  062E                     l1351:
  1392  062E  3001               	movlw	1
  1393  062F                     u865:
  1394  062F  1003               	clrc
  1395  0630  0DF5               	rlf	___lwdiv@quotient,f
  1396  0631  0DF6               	rlf	___lwdiv@quotient+1,f
  1397  0632  3EFF               	addlw	-1
  1398  0633  1D03               	skipz
  1399  0634  2E2F               	goto	u865
  1400  0635  0871               	movf	___lwdiv@divisor+1,w
  1401  0636  0273               	subwf	___lwdiv@dividend+1,w
  1402  0637  1D03               	skipz
  1403  0638  2E3B               	goto	u875
  1404  0639  0870               	movf	___lwdiv@divisor,w
  1405  063A  0272               	subwf	___lwdiv@dividend,w
  1406  063B                     u875:
  1407  063B  1C03               	skipc
  1408  063C  2E3E               	goto	u871
  1409  063D  2E3F               	goto	u870
  1410  063E                     u871:
  1411  063E  2E46               	goto	l1357
  1412  063F                     u870:
  1413  063F                     l1353:
  1414  063F  0870               	movf	___lwdiv@divisor,w
  1415  0640  02F2               	subwf	___lwdiv@dividend,f
  1416  0641  0871               	movf	___lwdiv@divisor+1,w
  1417  0642  1C03               	skipc
  1418  0643  03F3               	decf	___lwdiv@dividend+1,f
  1419  0644  02F3               	subwf	___lwdiv@dividend+1,f
  1420  0645                     l1355:
  1421  0645  1475               	bsf	___lwdiv@quotient,0
  1422  0646                     l1357:
  1423  0646  3001               	movlw	1
  1424  0647                     u885:
  1425  0647  1003               	clrc
  1426  0648  0CF1               	rrf	___lwdiv@divisor+1,f
  1427  0649  0CF0               	rrf	___lwdiv@divisor,f
  1428  064A  3EFF               	addlw	-1
  1429  064B  1D03               	skipz
  1430  064C  2E47               	goto	u885
  1431  064D                     l1359:
  1432  064D  3001               	movlw	1
  1433  064E  02F7               	subwf	___lwdiv@counter,f
  1434  064F  1D03               	btfss	3,2
  1435  0650  2E52               	goto	u891
  1436  0651  2E53               	goto	u890
  1437  0652                     u891:
  1438  0652  2E2E               	goto	l1351
  1439  0653                     u890:
  1440  0653                     l1361:
  1441  0653  0876               	movf	___lwdiv@quotient+1,w
  1442  0654  00F1               	movwf	?___lwdiv+1
  1443  0655  0875               	movf	___lwdiv@quotient,w
  1444  0656  00F0               	movwf	?___lwdiv
  1445  0657                     l621:
  1446  0657  0008               	return
  1447  0658                     __end_of___lwdiv:
  1448                           
  1449                           	psect	text6
  1450  058E                     __ptext6:	
  1451 ;; *************** function _UART_Init *****************
  1452 ;; Defined at:
  1453 ;;		line 45 in file "Probador1.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;		None
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;		None
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  1    wreg      void 
  1460 ;; Registers used:
  1461 ;;		wreg
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1467 ;;      Params:         0       0       0       0       0
  1468 ;;      Locals:         0       0       0       0       0
  1469 ;;      Temps:          0       0       0       0       0
  1470 ;;      Totals:         0       0       0       0       0
  1471 ;;Total ram usage:        0 bytes
  1472 ;; Hardware stack levels used: 1
  1473 ;; This function calls:
  1474 ;;		Nothing
  1475 ;; This function is called by:
  1476 ;;		_main
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480  058E                     _UART_Init:	
  1481                           ;psect for function _UART_Init
  1482                           
  1483  058E                     l1387:	
  1484                           ;incstack = 0
  1485                           ; Regs used in _UART_Init: [wreg]
  1486                           
  1487                           
  1488                           ;Probador1.c: 46:     TXSTAbits.BRGH = 1;
  1489  058E  1683               	bsf	3,5	;RP0=1, select bank1
  1490  058F  1303               	bcf	3,6	;RP1=0, select bank1
  1491  0590  1518               	bsf	24,2	;volatile
  1492  0591                     l1389:
  1493                           
  1494                           ;Probador1.c: 47:     SPBRG = 25;
  1495  0591  3019               	movlw	25
  1496  0592  0099               	movwf	25	;volatile
  1497  0593                     l1391:
  1498                           
  1499                           ;Probador1.c: 48:     RCSTAbits.SPEN = 1;
  1500  0593  1283               	bcf	3,5	;RP0=0, select bank0
  1501  0594  1303               	bcf	3,6	;RP1=0, select bank0
  1502  0595  1798               	bsf	24,7	;volatile
  1503  0596                     l1393:
  1504                           
  1505                           ;Probador1.c: 49:     TXSTAbits.TXEN = 1;
  1506  0596  1683               	bsf	3,5	;RP0=1, select bank1
  1507  0597  1303               	bcf	3,6	;RP1=0, select bank1
  1508  0598  1698               	bsf	24,5	;volatile
  1509  0599                     l1395:
  1510                           
  1511                           ;Probador1.c: 50:     RCSTAbits.CREN = 1;
  1512  0599  1283               	bcf	3,5	;RP0=0, select bank0
  1513  059A  1303               	bcf	3,6	;RP1=0, select bank0
  1514  059B  1618               	bsf	24,4	;volatile
  1515  059C                     l79:
  1516  059C  0008               	return
  1517  059D                     __end_of_UART_Init:
  1518                           
  1519                           	psect	text7
  1520  05AF                     __ptext7:	
  1521 ;; *************** function _ADC_Read *****************
  1522 ;; Defined at:
  1523 ;;		line 69 in file "Probador1.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  channel         1    wreg     unsigned char 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  channel         1    4[COMMON] unsigned char 
  1528 ;; Return value:  Size  Location     Type
  1529 ;;                  2    0[COMMON] unsigned int 
  1530 ;; Registers used:
  1531 ;;		wreg, status,2, status,0
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1537 ;;      Params:         2       0       0       0       0
  1538 ;;      Locals:         1       0       0       0       0
  1539 ;;      Temps:          2       0       0       0       0
  1540 ;;      Totals:         5       0       0       0       0
  1541 ;;Total ram usage:        5 bytes
  1542 ;; Hardware stack levels used: 1
  1543 ;; This function calls:
  1544 ;;		Nothing
  1545 ;; This function is called by:
  1546 ;;		_main
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550  05AF                     _ADC_Read:	
  1551                           ;psect for function _ADC_Read
  1552                           
  1553                           
  1554                           ;incstack = 0
  1555                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  1556                           ;ADC_Read@channel stored from wreg
  1557  05AF  00F4               	movwf	ADC_Read@channel
  1558  05B0                     l1399:
  1559                           
  1560                           ;Probador1.c: 70:     ADCON0 &= 0x11000101;
  1561  05B0  3001               	movlw	1
  1562  05B1  00F2               	movwf	??_ADC_Read
  1563  05B2  0872               	movf	??_ADC_Read,w
  1564  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  1565  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  1566  05B5  059F               	andwf	31,f	;volatile
  1567                           
  1568                           ;Probador1.c: 71:     ADCON0 |= channel <<3;
  1569  05B6  0874               	movf	ADC_Read@channel,w	;volatile
  1570  05B7  00F2               	movwf	??_ADC_Read
  1571  05B8  3002               	movlw	2
  1572  05B9                     u965:
  1573  05B9  1003               	clrc
  1574  05BA  0DF2               	rlf	??_ADC_Read,f
  1575  05BB  3EFF               	addlw	-1
  1576  05BC  1D03               	skipz
  1577  05BD  2DB9               	goto	u965
  1578  05BE  1003               	clrc
  1579  05BF  0D72               	rlf	??_ADC_Read,w
  1580  05C0  00F3               	movwf	??_ADC_Read+1
  1581  05C1  0873               	movf	??_ADC_Read+1,w
  1582  05C2  049F               	iorwf	31,f	;volatile
  1583  05C3                     l1401:
  1584                           
  1585                           ;Probador1.c: 72:     _delay((unsigned long)((2)*(4000000UL/4000.0)));
  1586  05C3  3003               	movlw	3
  1587  05C4  00F3               	movwf	??_ADC_Read+1
  1588  05C5  3097               	movlw	151
  1589  05C6  00F2               	movwf	??_ADC_Read
  1590  05C7                     u1657:
  1591  05C7  0BF2               	decfsz	??_ADC_Read,f
  1592  05C8  2DC7               	goto	u1657
  1593  05C9  0BF3               	decfsz	??_ADC_Read+1,f
  1594  05CA  2DC7               	goto	u1657
  1595  05CB  2DCC               	nop2
  1596  05CC                     l1403:
  1597                           
  1598                           ;Probador1.c: 73:     GO_nDONE = 1;
  1599  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  1600  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  1601  05CE  151F               	bsf	31,2	;volatile
  1602  05CF                     l94:	
  1603                           ;Probador1.c: 74:     while(GO_nDONE);
  1604                           
  1605  05CF  191F               	btfsc	31,2	;volatile
  1606  05D0  2DD2               	goto	u971
  1607  05D1  2DD3               	goto	u970
  1608  05D2                     u971:
  1609  05D2  2DCF               	goto	l94
  1610  05D3                     u970:
  1611  05D3                     l1405:
  1612                           
  1613                           ;Probador1.c: 75:     return ((ADRESH << 8) + ADRESL);
  1614  05D3  081E               	movf	30,w	;volatile
  1615  05D4  00F1               	movwf	?_ADC_Read+1
  1616  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  1617  05D6  1303               	bcf	3,6	;RP1=0, select bank1
  1618  05D7  081E               	movf	30,w	;volatile
  1619  05D8  00F0               	movwf	?_ADC_Read
  1620  05D9                     l97:
  1621  05D9  0008               	return
  1622  05DA                     __end_of_ADC_Read:
  1623                           
  1624                           	psect	text8
  1625  059D                     __ptext8:	
  1626 ;; *************** function _ADC_Init *****************
  1627 ;; Defined at:
  1628 ;;		line 63 in file "Probador1.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;		None
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;		None
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  1    wreg      void 
  1635 ;; Registers used:
  1636 ;;		wreg
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1642 ;;      Params:         0       0       0       0       0
  1643 ;;      Locals:         0       0       0       0       0
  1644 ;;      Temps:          2       0       0       0       0
  1645 ;;      Totals:         2       0       0       0       0
  1646 ;;Total ram usage:        2 bytes
  1647 ;; Hardware stack levels used: 1
  1648 ;; This function calls:
  1649 ;;		Nothing
  1650 ;; This function is called by:
  1651 ;;		_main
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655  059D                     _ADC_Init:	
  1656                           ;psect for function _ADC_Init
  1657                           
  1658  059D                     l1397:	
  1659                           ;incstack = 0
  1660                           ; Regs used in _ADC_Init: [wreg]
  1661                           
  1662                           
  1663                           ;Probador1.c: 64:     ADCON1 = 0b11000000;
  1664  059D  30C0               	movlw	192
  1665  059E  1683               	bsf	3,5	;RP0=1, select bank1
  1666  059F  1303               	bcf	3,6	;RP1=0, select bank1
  1667  05A0  009F               	movwf	31	;volatile
  1668                           
  1669                           ;Probador1.c: 65:     ADCON0 = 0b01000001;
  1670  05A1  3041               	movlw	65
  1671  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  1672  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  1673  05A4  009F               	movwf	31	;volatile
  1674                           
  1675                           ;Probador1.c: 66:     _delay((unsigned long)((10)*(4000000UL/4000.0)));
  1676  05A5  300D               	movlw	13
  1677  05A6  00F1               	movwf	??_ADC_Init+1
  1678  05A7  30FB               	movlw	251
  1679  05A8  00F0               	movwf	??_ADC_Init
  1680  05A9                     u1667:
  1681  05A9  0BF0               	decfsz	??_ADC_Init,f
  1682  05AA  2DA9               	goto	u1667
  1683  05AB  0BF1               	decfsz	??_ADC_Init+1,f
  1684  05AC  2DA9               	goto	u1667
  1685  05AD  2DAE               	nop2
  1686  05AE                     l91:
  1687  05AE  0008               	return
  1688  05AF                     __end_of_ADC_Init:
  1689  007E                     btemp	set	126	;btemp
  1690  007E                     wtemp0	set	126
  1691                           
  1692                           	psect	idloc
  1693                           
  1694                           ;Config register IDLOC0 @ 0x2000
  1695                           ;	unspecified, using default values
  1696  2000                     	org	8192
  1697  2000  3FFF               	dw	16383
  1698                           
  1699                           ;Config register IDLOC1 @ 0x2001
  1700                           ;	unspecified, using default values
  1701  2001                     	org	8193
  1702  2001  3FFF               	dw	16383
  1703                           
  1704                           ;Config register IDLOC2 @ 0x2002
  1705                           ;	unspecified, using default values
  1706  2002                     	org	8194
  1707  2002  3FFF               	dw	16383
  1708                           
  1709                           ;Config register IDLOC3 @ 0x2003
  1710                           ;	unspecified, using default values
  1711  2003                     	org	8195
  1712  2003  3FFF               	dw	16383
  1713                           
  1714                           	psect	config
  1715                           
  1716                           ;Config register CONFIG @ 0x2007
  1717                           ;	Oscillator Selection bits
  1718                           ;	FOSC = XT, XT oscillator
  1719                           ;	Watchdog Timer Enable bit
  1720                           ;	WDTE = OFF, WDT disabled
  1721                           ;	Power-up Timer Enable bit
  1722                           ;	PWRTE = ON, PWRT enabled
  1723                           ;	Brown-out Reset Enable bit
  1724                           ;	BOREN = ON, BOR enabled
  1725                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1726                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1727                           ;	Data EEPROM Memory Code Protection bit
  1728                           ;	CPD = OFF, Data EEPROM code protection off
  1729                           ;	Flash Program Memory Write Enable bits
  1730                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1731                           ;	In-Circuit Debugger Mode bit
  1732                           ;	DEBUG = 0x1, unprogrammed default
  1733                           ;	Flash Program Memory Code Protection bit
  1734                           ;	CP = OFF, Code protection off
  1735  2007                     	org	8199
  1736  2007  3F71               	dw	16241

Data Sizes:
    Strings     18
    Constant    10
    Data        1
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     17      25
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_2(CODE[11]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    _printf->___lwmod
    _putch->_UART_Write
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1429
                                             12 BANK0      5     5      0
                           _ADC_Init
                           _ADC_Read
                          _UART_Init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    18      2    1054
                                              0 BANK0     12    10      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      22
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _UART_Init
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _UART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     11      19       5       31.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      27      12        0.0%
ABS                  0      0      27       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Apr 25 22:27:08 2025

                      pc 0002                       l82 0583                       l91 05AE  
                     l85 058D                       l94 05CF                       l79 059C  
                     l88 0581                       l97 05D9                       _xx 0032  
                     fsr 0004                      l110 07DD                      l103 0751  
                    l104 0765                      l105 0779                      l106 078D  
                    l107 07A1                      l108 07B5                      l109 07C9  
                    l345 071A                      l621 0657                      l631 0613  
                    _RE0 0048                      _RE1 0049                      _RE2 004A  
                    u900 05E0                      u820 0589                      u901 05DF  
                    u821 0588                      u830 061C                      u831 061B  
                    u920 05F2                      u921 05F1                      u850 062E  
                    u930 05FC                      u851 062D                      u931 05FB  
                    u915 05E4                      u845 0620                      u870 063F  
                    u950 060F                      u871 063E                      u951 060E  
                    u935 05F8                      u865 062F                      u945 0603  
                    u970 05D3                      u890 0653                      u971 05D2  
                    u891 0652                      u875 063B                      u980 0666  
                    u965 05B9                      u885 0647                      u981 0665  
                    u990 06B7                      u991 06B6                      u995 06B3  
                    fsr0 0004                      indf 0000                     l1401 05C3  
                   l1403 05CC                     l1411 0660                     l1405 05D3  
                   l1341 0616                     l1333 0583                     l1421 0674  
                   l1413 0666                     l1351 062E                     l1343 061C  
                   l1335 0589                     l1423 068E                     l1415 066D  
                   l1353 063F                     l1345 061F                     l1361 0653  
                   l1337 057B                     l1441 06C7                     l1433 069C  
                   l1425 0696                     l1417 066F                     l1409 065B  
                   l1355 0645                     l1347 0626                     l1339 0614  
                   l1371 05EA                     l1443 06F5                     l1427 069A  
                   l1357 0646                     l1349 062A                     l1381 0609  
                   l1373 05EE                     l1365 05DA                     l1445 06FB  
                   l1437 06B8                     l1461 073A                     l1453 071B  
                   l1391 0593                     l1359 064D                     l1375 05F2  
                   l1367 05E0                     l1383 060F                     l1439 06C2  
                   l1447 0706                     l1471 076E                     l1463 0744  
                   l1455 0725                     l1393 0596                     l1377 05FC  
                   l1369 05E3                     l1481 079F                     l1473 0777  
                   l1465 074F                     l1457 0728                     l1395 0599  
                   l1387 058E                     l1379 0602                     l1811 0686  
                   l1491 07D2                     l1483 07AA                     l1475 0782  
                   l1467 075A                     l1459 072E                     l1397 059D  
                   l1389 0591                     l1493 07DB                     l1485 07B3  
                   l1477 078B                     l1469 0763                     l1399 05B0  
                   l1487 07BE                     l1479 0796                     l1489 07C7  
                   STR_1 001E                     STR_2 0013                     u1000 06C2  
                   u1001 06C1                     u1010 0706                     u1011 0705  
                   u1020 071A                     u1100 0796                     u1021 0719  
                   u1101 0795                     u1110 079F                     u1030 074F  
                   u1111 079E                     u1031 074E                     u1120 07AA  
                   u1040 075A                     u1121 07A9                     u1041 0759  
                   u1130 07B3                     u1050 0763                     u1131 07B2  
                   u1051 0762                     u1140 07BE                     u1060 076E  
                   u1141 07BD                     u1061 076D                     u1150 07C7  
                   u1070 0777                     u1151 07C6                     u1071 0776  
                   u1160 07D2                     u1080 0782                     u1161 07D1  
                   u1081 0781                     u1170 07DB                     u1090 078B  
                   u1171 07DA                     u1091 078A                     u1647 07E5  
                   u1657 05C7                     u1667 05A9                     _caso 0031  
                   _main 071B                     _mask 0035                     btemp 007E  
       __end_of_ADC_Init 05AF         __end_of_ADC_Read 05DA                     start 0000  
                  ?_main 0070          __end_of___lwdiv 0658          __end_of___lwmod 0614  
                  _SPBRG 0099                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _PORTD 0008                    _PORTE 0009  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    _TRISE 0089                    _TXREG 0019  
            ?_UART_Write 0070          __end_of_dpowers 0013                    _putch 057A  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07EF             __end_of_main 07EF                   ??_main 002C  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 _ADRESL 009E                   ?_putch 0070        __end_of_UART_Init 059D  
              ??___lwdiv 0074                ??___lwmod 007C          ADC_Read@channel 0074  
                 _printf 0658                   _prueba 0033                   _puerto 0036  
              ?_ADC_Init 0070                ?_ADC_Read 0070  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 0579            __end_of_putch 0582  
             ??_ADC_Init 0070               ??_ADC_Read 0072                  ??_putch 0071  
             __pbssBANK0 0031               __pmaintext 071B                  ?_printf 0020  
           ??_UART_Write 0070               __stringtab 0003               _incremento 0037  
     __end_of_UART_Write 058E                  ___lwdiv 0614                  ___lwmod 05DA  
                __ptext1 0658                  __ptext2 057A                  __ptext3 0582  
                __ptext4 05DA                  __ptext5 0614                  __ptext6 058E  
                __ptext7 05AF                  __ptext8 059D                  _dpowers 0009  
                _nro_pin 0038     end_of_initialization 07FC                _RCSTAbits 0018  
                printf@c 002B                  printf@f 002A                _UART_Init 058E  
         UART_Write@data 0070                _TXSTAbits 0098               ?_UART_Init 0070  
         __end_of_printf 071B      start_initialization 07EF              __pdataBANK0 0038  
               ??_printf 0022                ___latbits 0002            __pcstackBANK0 0020  
       ___lwdiv@dividend 0072                 ?___lwdiv 0070                 ?___lwmod 0078  
            ??_UART_Init 0070                __pstrings 0003                 _ADC_Init 059D  
               _ADC_Read 05AF         ___lwdiv@quotient 0075                 _GO_nDONE 00FA  
            __stringbase 0008               printf@flag 0025               printf@prec 0029  
              main@valor 002F       __end_of__stringtab 0009          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0077                 _port_act 0034                printf@val 0027  
              putch@data 0071         ___lwmod@dividend 007A                stringcode 0003  
               printf@ap 0026          ___lwmod@divisor 0078          ___lwmod@counter 007D  
               stringdir 0003                 stringtab 0003               _UART_Write 0582  
